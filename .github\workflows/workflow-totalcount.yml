name: Workflow Runs Total Count
on:
  workflow_dispatch:
    inputs:
      StartDate:
        required: true
        type: string 
        description: 'Start Date in Format yyyy-mm-dd'
      EndDate:
        required: true
        type: string
        description: 'End Date in Format yyyy-mm-dd'
  workflow_call:
    inputs:
      StartDate:
        required: true
        type: string 
        description: 'Start Date in Format yyyy-mm-dd'
      EndDate:
        required: true
        type: string
        description: 'End Date in Format yyyy-mm-dd'

    secrets:  
      PERSONAL_ACCESS_TOKEN:
        required: true
    outputs:
      totalCount:
        description: "The total count of the workflow runs"
        value: ${{ jobs.workflowsrun-totalcount.outputs.count }}


jobs:
  workflowsrun-totalcount:
      runs-on: [ Portal ]
      outputs:
        count: ${{ steps.workflowrunscount.outputs.totalCount }}
      steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Totalcount Script
        id: workflowrunscount
        shell: pwsh
        run: |
            $orgName = "https://github.albertsons.com/api/v3/orgs/albertsons"
            $uriBase = "https://github.albertsons.com/api/v3"
            $baseHeader =  @{"Authorization" = "token  ${{ secrets.PERSONAL_ACCESS_TOKEN }}" ; "Content-Type" = "application/json" }
            $StartDate = "${{ inputs.StartDate }}" -replace " ", ""
            $EndDate = "${{ inputs.EndDate }}" -replace " ", ""
            $allRepos = @()
            $page=0
            #Fetching repos until the count comes back zero
            do 
            {    
               $page += 1    
               $params = @{'Uri' = ('{0}/repos?page={1}&per_page=100' -f
                                    $orgName, $page )
                           'Headers' = $baseHeader                
                           }    
               $repos = Invoke-RestMethod @params   
               $allRepos += $repos    
               $repoCount = $repos.Count 
            } while($repoCount -gt 0)
            function callGithubAPI {
                param (
                    [Parameter(
                        Position = 0,
                        Mandatory = $true
                    )]
                    [string]
                    $urlForGithubAPI
                )
                $runGetRepoWorkflowruns = @{
                    Uri     = $urlForGithubAPI
                    Headers = $baseHeader
                }
                Invoke-RestMethod @runGetRepoWorkflowruns
            }
            foreach ( $repo in $allRepos ){
                    $repoName = $repo.name
                    write-host $repoName
                    $WorkflowsURL = ("{0}/repos/albertsons/{1}/actions/runs?created={2}..{3}" -f $uriBase, $repoName, $StartDate, $EndDate)
                    $WorkflowRunsAsPerInput = callGithubAPI -urlForGithubAPI $WorkflowsURL
                    write-host "$repoName = $WorkflowRunsAsPerInput.total_count"
                    $totalCount += $WorkflowRunsAsPerInput.total_count
                    #write-host "Total Count = $totalCount"
            }
            echo "::set-output name=totalCount::$totalCount"
            write-host "Total Count for all the repos: $totalCount"